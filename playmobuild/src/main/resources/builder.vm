#set($ident = "        ")
#if ($packageName)
package $packageName;
#end

public class $builderSimpleClassName {

    #foreach ($field in $requiredFields)
    public interface #if ($foreach.isFirst)StartBuilder#else${display.capitalize($field.name())}Builder#end {
$ident#if($foreach.isLast)OptionalBuilder#else${display.capitalize($requiredFields[$foreach.index+1].name())}Builder#end with${display.capitalize(${field.name()})}($field.type() value);
    }
    #end

    public interface OptionalBuilder {
        #foreach ($field in $optionalFields)
        OptionalBuilder with${display.capitalize(${field.name()})}($field.type() value);
        #if($field.isInline())
        OptionalBuilder add${display.capitalize(${field.inlineName()})}($field.type().getTypeArguments().get(0) value);
        #end
        #end
        $className build();
    }

    private static class InnerBuilder implements #foreach ($field in $requiredFields)#if($foreach.isFirst)StartBuilder#else ${display.capitalize($field.name())}Builder#end,#end OptionalBuilder {
        #foreach ($field in $fields)
        private ${field.type()} ${field.name()}#if($field.isInline()) = new java.util.ArrayList<>()#end;
        #end

        #foreach ($field in $requiredFields)
        @Override
        public #if($foreach.isLast)OptionalBuilder#else ${display.capitalize($requiredFields[$foreach.index+1].name())}Builder#end with${display.capitalize(${field.name()})}($field.type() value) {
            this.${field.name()} = value;
            return this;
        }
        #end

        #foreach ($field in $optionalFields)
        @Override
        public OptionalBuilder with${display.capitalize(${field.name()})}($field.type() value) {
            this.${field.name()} = value;
            return this;
        }
        #if($field.isInline())

        @Override
        public OptionalBuilder add${display.capitalize(${field.inlineName()})}($field.type().getTypeArguments().get(0) value) {
            this.${field.name()}.add(value);
            return this;
        }
        #end
        #end

        @Override
        public $className build() {
            return new $className(
                #foreach ($field in $fields)
                ${field.name()}#if ($foreach.hasNext),#end
                #end
            );
        }
    }

    public static StartBuilder make() {
        return new InnerBuilder();
    }
}